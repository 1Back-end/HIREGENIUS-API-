from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.main.core.dependencies import get_db
from app.main import models
from app.main.core.i18n import __  # Assurez-vous d'importer la fonction de traduction
from sklearn.externals import joblib  # Pour charger un modèle entraîné
from app.main.models import Experience, Candidat  # Assurez-vous que ces modèles sont importés

router = APIRouter(prefix="/analyse", tags=["analyse"])

# Charger le modèle d'IA pré-entraîné (exemple avec un modèle de machine learning)
# Assurez-vous d'avoir un modèle d'IA sauvegardé et prêt à l'emploi
model = joblib.load("path_to_your_model.pkl")  # Le modèle doit être entraîné sur des données pertinentes

def predict_acceptance(candidate: Candidat, job_offer: models.JobOffer) -> str:
    """
    Prédire si un candidat est accepté ou rejeté en fonction de l'IA.
    Cette fonction peut être adaptée pour inclure des critères spécifiques liés à l'offre et au profil du candidat.
    """
    # Extraire les caractéristiques pertinentes du candidat et de l'offre d'emploi
    candidate_features = [
        candidate.experiences[0].job_title,  # Exemple d'extraction d'une expérience professionnelle
        candidate.experiences[0].start_date,  # Exemple de date de début d'expérience
        candidate.phone_number,  # Exemple d'information supplémentaire
        job_offer.salary,  # Exemple de critère lié à l'offre
        job_offer.employment_type,  # Type de contrat (CDD, CDI, Freelance)
    ]
    
    # Effectuer la prédiction (le modèle d'IA renverra "Accepted" ou "Rejected")
    prediction = model.predict([candidate_features])
    
    # Retourner la prédiction
    return "ACCEPTED" if prediction == 1 else "REJECTED"  # 1 signifie accepté, 0 signifie rejeté

# Endpoint pour obtenir les candidats retenus (acceptés)
@router.get("/applications/{job_offer_uuid}/shortlisted_candidates")
def get_shortlisted_candidates(
    job_offer_uuid: str, 
    db: Session = Depends(get_db)
):
    # Récupérer l'offre d'emploi par UUID
    job_offer = db.query(models.JobOffer).filter(models.JobOffer.uuid == job_offer_uuid).first()
    
    if not job_offer:
        raise HTTPException(status_code=404, detail=__(key="offer-not-found"))

    # Récupérer les candidatures associées à cette offre d'emploi
    applications = db.query(models.Application).filter(models.Application.job_offer_uuid == job_offer_uuid).all()

    if not applications:
        raise HTTPException(status_code=404, detail=__(key="no-applications-found-for-this-job-offer"))
    
    # Filtrer les candidats acceptés via l'IA
    shortlisted_candidates = [
        {"first_name": app.candidate.first_name, "last_name": app.candidate.last_name}
        for app in applications if predict_acceptance(app.candidate, job_offer) == "ACCEPTED"
    ]

    # Retourner les résultats
    return {
        "shortlisted_candidates": shortlisted_candidates,
        "message": __(key="shortlisted-candidates-found")
    }

# Endpoint pour obtenir les candidats rejetés
@router.get("/applications/{job_offer_uuid}/rejected_candidates")
def get_rejected_candidates(
    job_offer_uuid: str, 
    db: Session = Depends(get_db)
):
    # Récupérer l'offre d'emploi par UUID
    job_offer = db.query(models.JobOffer).filter(models.JobOffer.uuid == job_offer_uuid).first()
    
    if not job_offer:
        raise HTTPException(status_code=404, detail=__(key="offer-not-found"))

    # Récupérer les candidatures associées à cette offre d'emploi
    applications = db.query(models.Application).filter(models.Application.job_offer_uuid == job_offer_uuid).all()

    if not applications:
        raise HTTPException(status_code=404, detail=__(key="no-applications-found-for-this-job-offer"))
    
    # Filtrer les candidats rejetés via l'IA
    rejected_candidates = [
        {"first_name": app.candidate.first_name, "last_name": app.candidate.last_name}
        for app in applications if predict_acceptance(app.candidate, job_offer) == "REJECTED"
    ]

    # Retourner les résultats
    return {
        "rejected_candidates": rejected_candidates,
        "message": __(key="rejected-candidates-found")
    }





from datetime import timedelta, datetime
from typing import Any, Optional
from fastapi import APIRouter, Depends, Body, HTTPException, Query
from sqlalchemy.orm import Session
from app.main.core.dependencies import get_db, TokenRequired
from app.main import schemas, crud, models
from app.main.core.i18n import __
from app.main.core.config import Config
from app.main.core.dependencies import CandidateTokenRequired

router = APIRouter(prefix="/application", tags=["application"])

@router.post("/create",response_model=schemas.Msg)
def applied_offers(
    *,
    db: Session = Depends(get_db),
    obj_in:schemas.ApplicationCreate,
    current_user: models.Candidat = Depends(CandidateTokenRequired())
):
    candidate_uuid = current_user.uuid
    crud.application.create(db=db,obj_in=obj_in,candidate_uuid=candidate_uuid)
    return schemas.Msg(message=__(key="offer-applied-successfully"))

@router.post("/update-status",response_model=schemas.Msg)
def create_offers(
    *,
    db: Session = Depends(get_db),
    obj_in:schemas.ApplicationDetails,
    status: str = Query(..., enum=[st.value for st in models.ApplicationStatusEnum]),
    current_user: models.User = Depends(TokenRequired(roles=["SUPER_ADMIN"]))
):
    crud.application.update_status(db=db,uuid=obj_in.uuid,status=status)
    return schemas.Msg(message=__(key="application-status-update-successfully"))

@router.delete("/delete",response_model=schemas.Msg)
def delete_offers(
    *,
    db: Session = Depends(get_db),
    obj_in:schemas.ApplicationDetails,
    current_user: models.User = Depends(TokenRequired(roles=["SUPER_ADMIN"]))
):
    crud.application.delete(db=db,obj_in=obj_in)
    return schemas.Msg(message=__(key="application-delete-successfully"))

@router.get("/get_many", response_model=None)
async def get_many_offers(
    *,
    db: Session = Depends(get_db),
    page: int = 1,
    per_page: int = 30,
    order: str = Query(None, enum=["ASC", "DESC"]),
    status: str = Query(..., enum=[st.value for st in models.ApplicationStatusEnum]),
    keyword: Optional[str] = None,
    order_field: Optional[str] = None,  # Correction de order_filed → order_field
    current_user: models.User = Depends(TokenRequired(roles=["SUPER_ADMIN"]))
):
    return crud.application.get_multi(
        db=db,
        page=page,
        per_page=per_page,
        order=order,
        status=status,
        order_field=order_field,  # Correction ici aussi
        keyword=keyword,
        
    )
















from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.main.core.dependencies import get_db
from app.main import models
from app.main.core.i18n import __  # Assurez-vous d'importer la fonction de traduction
from typing import List
from datetime import datetime

router = APIRouter(prefix="/analyse", tags=["analyse"])

# Exemple de fonction qui pourrait évaluer la pertinence d'un candidat pour une offre d'emploi
def evaluate_candidate(candidate, job_offer):
    """
    Simule une évaluation d'un candidat basé sur des critères prédéfinis.
    Ici, on compare les compétences du candidat avec les exigences de l'offre d'emploi.
    """
    # Exemples simples : Vous pouvez enrichir cette logique avec plus de critères.
    required_skills = job_offer.requirements.lower().split(",")  # Exigences de l'offre (séparées par des virgules)
    candidate_skills = candidate.experiences  # Les expériences des candidats, vous pouvez en extraire les compétences.

    # Calcul simple pour déterminer si le candidat a les compétences requises
    match_score = sum(
        1 for skill in required_skills if any(skill.strip() in exp.description.lower() for exp in candidate_skills)
    )

    # Exemple de décision : Si le score de correspondance est supérieur à un seuil, on l'accepte
    return match_score >= 2  # Exemple de seuil de compétence

# Endpoint pour prédire les candidats acceptés et rejetés
@router.get("/applications/{job_offer_uuid}/predicted_candidates")
def get_predicted_candidates(
    job_offer_uuid: str, 
    db: Session = Depends(get_db)
):
    # Récupérer l'offre d'emploi par UUID
    job_offer = db.query(models.JobOffer).filter(models.JobOffer.uuid == job_offer_uuid).first()
    
    if not job_offer:
        raise HTTPException(status_code=404, detail=__(key="offer-not-found"))

    # Récupérer les candidatures associées à cette offre d'emploi
    applications = db.query(models.Application).filter(models.Application.job_offer_uuid == job_offer_uuid).all()

    if not applications:
        raise HTTPException(status_code=404, detail=__(key="no-applications-found-for-this-job-offer"))

    # Prédire les candidats acceptés et rejetés en fonction de la correspondance des compétences
    accepted_candidates = []
    rejected_candidates = []

    for app in applications:
        is_accepted = evaluate_candidate(app.candidate, job_offer)
        candidate_info = {
            "first_name": app.candidate.first_name,
            "last_name": app.candidate.last_name,
            "email": app.candidate.email
        }

        if is_accepted:
            accepted_candidates.append(candidate_info)
        else:
            rejected_candidates.append(candidate_info)

    # Retourner les résultats
    return {
        "accepted_candidates": accepted_candidates,
        "rejected_candidates": rejected_candidates,
        "message": __(key="candidates-prediction-complete")
    }
